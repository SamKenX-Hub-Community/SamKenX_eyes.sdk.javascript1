name: Tests
description: Run tests for a package
inputs:
  working-directory:
    description: the path to the directory from repository root
    type: string
    required: true
  test-type:
    description: type of the testing (unit, it, e2e, coverage)
    type: string
  build-type:
    description: type of the build script
    type: string
  setup-type:
    description: type of the setup script
    type: string
  links:
    description: names of package directories to link before testing
    type: string
  grep:
    description: grep pattern to filter tests
    type: string
  jobs:
    description: number of jobs to run tests in parallel
    type: string
  report:
    description: report level
    type: string
    default: sandbox
  shell:
    description: shell to use
    type: string
    default: bash
runs:
  using: composite
  steps:
    - name: Test
      shell: ${{inputs.shell}}
      working-directory: ${{inputs.working-directory}}
      env:
        MOCHA_GREP: ${{inputs.grep}}
        MOCHA_JOBS: ${{inputs.jobs}}
      run: |
        echo "::group::Configure NPM and YARN"
        if [ "${{runner.os}}" = "Windows" ]; then npm config set script-shell "C:\\Program Files\\Git\\bin\\bash.exe"; fi
        yarn config set ignore-engines true
        echo "::endgroup::"

        echo "::group::Installing and updating dependencies"
        yarn --cwd ../../ install
        yarn install
        if [ "${{runner.os}}" = "Windows" ]
        then
          npm run deps --if-present --script-shell $COMSPEC
        else
          npm run deps --if-present
        fi
        npm run upgrade:framework --if-present
        echo "::endgroup::"

        if [ ! -z "${{inputs.links}}" ]
        then
          echo "::group::Linking dependencies"
          node ../../scripts/link.js "${{inputs.links}}" --build --install
          ls -F ./node_modules/@applitools
          echo "::endgroup::"
        fi

        echo "::group::Building package"
        if [ ! -z "${{inputs.build-type}}" ]
        then
          if [ "${{inputs.build-type}}" != "none" ]; then npm run build:${{inputs.build-type}}; fi
        else
          npm run build --if-present
        fi
        echo "::endgroup::"

        echo "::group::Setting up test environment"
        if [ ! -z "${{inputs.setup-type}}" ]
        then
          if [ "${{inputs.setup-type}}" != "none" ]; then npm run setup:${{inputs.setup-type}}; fi
        else
          npm run setup --if-present
        fi
        if [ -e .env ]
        then
          set -o allexport
          source .env
          set +o allexport
        fi
        echo "::endgroup::"

        echo "::group::Running tests"
        if [ ! -z "${{inputs.test-type}}" ]; then npm run test:${{inputs.test-type}}; else npm run test --if-present; fi
        echo "::endgroup::"

        echo "::group::Sending reports"
        if [ "${{inputs.report}}" = "sandbox" ]; then npm run report --if-present -- --sandbox; else npm run report --if-present; fi
        echo "::endgroup::"
